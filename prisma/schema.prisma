// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String    @id
  email          String?   @unique
  hashedPassword String?
  displayName    String
  role           UserRole  @default(USER)
  sessions       Session[]
  orders         Order[]   @relation("OrderToStaff")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([email])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  foods Food[] @relation("CategoryToFood")
}

enum FoodUnit {
  KG
  PLATE
  CUP
  BOWL
  BOTTLE
  PIECE
}

model Food {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  unit        FoodUnit
  price       Float
  categoryId  Int
  images      Image[]
  category    Category @relation("CategoryToFood", fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  foodId    Int
  url       String
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([foodId])
}

model Restaurant {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  address      String
  phone        String
  logoImageUrl String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED
}

model Order {
  id           String      @id @default(cuid())
  staffId      String
  status       OrderStatus @default(PENDING)
  staff        User        @relation("OrderToStaff", fields: [staffId], references: [id])
  date         DateTime    @db.Date()
  foods        String      @db.Text //JSON stringtified array of {foodId: Int, foodQuantity: Int, totalAmount: Float, foodName: String, foodPrice: Float}
  foodQuantity Int
  totalPrice   Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([staffId])
  @@index([date])
}
